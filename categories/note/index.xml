<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Note on Yuan のノート</title><link>https://e61983.github.io/categories/note/</link><description>Recent content in Note on Yuan のノート</description><generator>Hugo</generator><language>zh-tw</language><lastBuildDate>Tue, 26 Aug 2025 23:54:11 +0800</lastBuildDate><atom:link href="https://e61983.github.io/categories/note/index.xml" rel="self" type="application/rss+xml"/><item><title>OTP — 一次性密碼的原理與實作</title><link>https://e61983.github.io/posts/otp-code-introduction/</link><pubDate>Tue, 26 Aug 2025 23:54:11 +0800</pubDate><guid>https://e61983.github.io/posts/otp-code-introduction/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;有時候我們登入服務時，螢幕會跳出一句：「你的驗證碼是 123456」。這串數字只能用一次，過了幾十秒就失效了。這種機制叫做 &lt;strong&gt;OTP（One-Time Password，一次性密碼）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;它看似簡單，卻是今天大多數二階段驗證（2FA）或多因子驗證（MFA）的基石。這篇文章，就來聊聊 OTP 的運作方式，最後會給一個 Go 的範例程式，讓你自己動手試試。&lt;/p&gt;</description></item><item><title>在 Go 中與 Protobuf 共舞 ？！</title><link>https://e61983.github.io/posts/go-and-protobuf/</link><pubDate>Tue, 09 Aug 2022 23:20:07 +0800</pubDate><guid>https://e61983.github.io/posts/go-and-protobuf/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;會有這一篇的誕生是因為原本在寫 gRPC 的筆記時發現篇幅太長，想說還是拆開寫好了。於是乎這一篇就出現了。&lt;/p&gt;</description></item><item><title>在 Synology NAS 開啟 iperf 伺服器</title><link>https://e61983.github.io/posts/use-iperf-on-synology-nas/</link><pubDate>Tue, 02 Aug 2022 01:59:04 +0800</pubDate><guid>https://e61983.github.io/posts/use-iperf-on-synology-nas/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;最近發現家中的 NAS 速度 &amp;ldquo;好像&amp;rdquo; 沒有達到筆者的預期。所以想來實際測看看可以目前的網路環境可以跑到什麼程度。於似乎這一篇就誕生了。&lt;/p&gt;</description></item><item><title>Go 語言使用私有 Git Repository</title><link>https://e61983.github.io/posts/go-module-using-private-repository/</link><pubDate>Sat, 30 Jul 2022 14:51:00 +0800</pubDate><guid>https://e61983.github.io/posts/go-module-using-private-repository/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;最近終於有時間整裡筆者家中的 NAS 。先前筆者已經架設好了 Gitea，但一直沒有時間把整個開發環境串起來。這篇文章記錄了如何在 go 中使用自架的 Git Repository。&lt;/p&gt;</description></item><item><title>Go語言、動態連結函式庫與它們的產地</title><link>https://e61983.github.io/posts/golang-with-shared-library/</link><pubDate>Thu, 21 Jul 2022 13:16:54 +0800</pubDate><guid>https://e61983.github.io/posts/golang-with-shared-library/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;最近寫 Go 時想嘗試使用動態連結函式庫。於是乎這一篇就誔生了。
本文會試著使用 Go 編出一個動態連結函式庫，並使用 C 語言程式以及 Go 語言程式呼叫它。&lt;/p&gt;</description></item><item><title>使用 Vue、Electron 以及 Go 建立一個小工具</title><link>https://e61983.github.io/posts/how-to-use-vue-electron-and-go-to-build-an-app/</link><pubDate>Fri, 15 Jul 2022 16:01:27 +0800</pubDate><guid>https://e61983.github.io/posts/how-to-use-vue-electron-and-go-to-build-an-app/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;最近剛好有機會要寫有圖形化介面的程式。想來想去感覺可以寫寫看 Electron！於是乎本篇就這樣誕生了。&lt;/p&gt;</description></item><item><title>如何解決在 MacOS VS Code/Cursor 按鍵無法連續輸入的問題</title><link>https://e61983.github.io/posts/macos-hold-a-key-and-repeat-it-in-vscode/</link><pubDate>Wed, 22 Jun 2022 11:26:48 +0800</pubDate><guid>https://e61983.github.io/posts/macos-hold-a-key-and-repeat-it-in-vscode/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;筆者已經習慣 vim 的輸入模式。所以在使用 VS Code 或 Cursor 時，會安裝 vim 輸入模式的外掛。在鍵盤按鍵接住時，這些編輯器卻不會連續輸入。本文主要就是要來解決這個問題。&lt;/p&gt;</description></item><item><title>使用 qpdf 來合併 PDF 與移除密碼保護</title><link>https://e61983.github.io/posts/cli-remove-pdf-password/</link><pubDate>Thu, 02 Sep 2021 10:13:38 +0800</pubDate><guid>https://e61983.github.io/posts/cli-remove-pdf-password/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;突然有了移除 PDF 密碼保護的需求。在查找相關的資料時，順手記錄下來。&lt;/p&gt;</description></item><item><title>COSCUP 2021 Day 2</title><link>https://e61983.github.io/posts/coscup-2021-day-2/</link><pubDate>Sun, 01 Aug 2021 10:12:46 +0800</pubDate><guid>https://e61983.github.io/posts/coscup-2021-day-2/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;今年的 COSCUP 因應 COVID-19 疫情，所以以線上直播的方式進行。本篇主要是記錄大會第二天有興趣的議程以及關鍵字。&lt;/p&gt;</description></item><item><title>COSCUP 2021 Day 1</title><link>https://e61983.github.io/posts/coscup-2021-day-1/</link><pubDate>Sat, 31 Jul 2021 10:10:29 +0800</pubDate><guid>https://e61983.github.io/posts/coscup-2021-day-1/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;今年的 COSCUP 因應 COVID-19 疫情，所以以線上直播的方式進行。本篇主要是記錄大會第一天有興趣的議程以及關鍵字。&lt;/p&gt;</description></item></channel></rss>