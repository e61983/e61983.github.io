<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Musl on Yuan のノート</title><link>https://e61983.github.io/tags/musl/</link><description>Recent content in Musl on Yuan のノート</description><generator>Hugo</generator><language>zh-tw</language><lastBuildDate>Wed, 03 Sep 2025 22:48:04 +0800</lastBuildDate><atom:link href="https://e61983.github.io/tags/musl/index.xml" rel="self" type="application/rss+xml"/><item><title>從 glibc 到 musl : 靜態編譯上的新選擇</title><link>https://e61983.github.io/posts/go-cgo-static-dynamic-link/</link><pubDate>Wed, 03 Sep 2025 22:48:04 +0800</pubDate><guid>https://e61983.github.io/posts/go-cgo-static-dynamic-link/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;在 Go 世界裡，&lt;strong&gt;可移植性&lt;/strong&gt; 一直是它引以為傲的特性。大部分時候，我們只要 &lt;code&gt;go build&lt;/code&gt; 就能得到一個幾乎純靜態的二進位，拿去其他機器執行也不太會出問題。然而，這種「幾乎」背後，跟 &lt;code&gt;cgo&lt;/code&gt; 和 &lt;code&gt;cmd/link&lt;/code&gt; 的運作有很大關係。本文將以 &lt;strong&gt;cgo 為核心&lt;/strong&gt;，延伸到 &lt;strong&gt;linkmode&lt;/strong&gt; 與 &lt;strong&gt;musl-gcc&lt;/strong&gt; 的應用，帶同學們理解 Go 執行檔在靜態與動態鏈結上的差異。&lt;/p&gt;</description></item></channel></rss>