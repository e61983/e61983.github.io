[{"content":"前言 今年的 COSCUP 因應 COVID-19 疫情，所以以線上直播的方式進行。本篇主要是記錄大會第二天有興趣的議程以及關鍵字。\n主要內容 細談 MySQL Replication 強項 References:  MySQL Replication 主從式架構設定教學 MySQL 主從複製原理  資料庫也可以全年無休啦! 神奇的MySQL HA架構拯救你的資料庫!   MySQL Cluster\n SQL Node 讀資料 Data Node 存資料 Management Node - 用來管理 NDB Cluster    MGM:\n config.ini ndb_mgm    Data/ SQL Node\n /etc/my.conf ndbd    SQL\n systemd start mysqld    Node Group\n  一般是異步\n  ndb 是同步的\n Master 會傳 Log 給 Slave ，確認後會執行動作來進行同步。    References  MySQL Cluster學習筆記  SignalR 整合 LINE，在LIFF裡建立一對一聊天管道   LIFF ( Line Front-end Framework ) SignalR  Group    References:  SignalR  MySQL 8 那麼久了，還沒開始用 window function 嗎？  什麼是 Wndow Function  保留每一列的 Query 結果，但又有聚合的操作結果。       OVER (PARTITION BY contry)\n  { OVER (window_spec) | OVER window_name }\n  Query Rewrite\n  使用 Qemu + Debian Linux 來進行嵌入式系統入門教學    Den U-Boot Linux Kernel Root File System  References:  共筆  MySQL究極防禦工事(全自動化MHA機制)  Proxy SQL Orchestrator 了解 Master - Slave 架構、同步機制  References:  Slide 共筆  初試 Casbin - 快速搭建符合 99% 產品都需要的高彈性可維護之授權控制系統  Authen \u0026amp; Authorization  Authen - 你是誰 Authorization - 你可以做什麼    權限管理方式  ACL (Accuess Control List) RBAC (Role-Base Access Control) Attribute-based access control  Casbin   PML Policy Storage  References:  casbin/casbin ory ory/oathkeeper  MySQL 8.0的新SQL為開發者開啟一片天  Window Function  History  4.1 B-Tree, R-Tree, Subquery, Prepaed Statement 5.0 Stored Routines, Views, XTranstion 5.1 Event, Row-Based replicatoion, Plugin API 5.5 Support Unicode 5.6 InnoDB Buffer Pool Instance, Memmcached API, GTID 5.7 JSON data type, CJK 檢索, online DDL, JSON Function 8.0 \u0026hellip;  帶您製作新潮、實用且開源的 LINE 電子名片與廣告傳單  Flex Message LIFF  References:  不用寫程式也能做 LINE 數位版名片\n taichunmin/liff-businesscard ","description":"","id":0,"section":"posts","tags":["mySQL","ACL","chatbot","LIFF","coscup"],"title":"COSCUP 2021 Day 2","uri":"https://e61983.github.io/2021-08-01-coscup-2021-day-2/"},{"content":"前言 今年的 COSCUP 因應 COVID-19 疫情，所以以線上直播的方式進行。本篇主要是記錄大會第一天有興趣的議程以及關鍵字。\n COSCUP2021\n  主要內容 Introduction to Transactional Memory and Its Implementation GCC Example:\n1 2 3 4 5 6 7 8  #include \u0026lt;stdio.h\u0026gt;int main() { int i = 0; __transaction_atomic { i++; } return 0; }   在編譯的時候要加上 -fgnu-tm\n1  gcc -fgnu-tm   Reference  Slide reborn2266/STM-Toy  Learning go error handling design from open source  “Values can be programmed, and since errors are values, errors can be programmed.” \u0026ndash;Rob Pike\n References:  Don’t just check errors, handle them gracefully Errors are values  A trip about how I contribute to LLVM - Douglas Chen References:  Slide  從 Go 的 runtime 源碼發掘瘋狂的 slice 用法 References  Slide  Select, Manage, and Backport the Long-Term Stable Kernels  Linux CIP\n    References:  共筆 Slide Automotive Linux  Cuju - 虛擬機容錯功能實作 References  Cuju  User authentication in Go Web Server  Rainbow table attack  讓密碼安全性更高的方式  salt (建議32bit) pepper (secret salt)   加鹽的方式\n   password length: 10 ~ 64  OTP (Once Time Password)  Time OTP SMS OTP  Resources:  \u0026ndash;have i been pwned?  Let\u0026rsquo;s Publish a Collaborative e-Book for Linux Kernel References:  共筆 The Linux Kernel Module Programming Guide Original Guide  藉由實作多任務核心來體驗作業系統概念 Raspbootcom:\n raspbootcom\n   Enable UART0 FIFO  References:  Slide DavidSpickett/ARMMultiTasking Raspbootcom  參考連結  TransactionalMemory  Rpi-JTAG\n","description":"","id":1,"section":"posts","tags":["gcc","go","linux","coscup"],"title":"COSCUP 2021 Day 1","uri":"https://e61983.github.io/2021-07-31-coscup-2021-day-1/"},{"content":"前言 一般來說，如果想要調整 Linux Kernel 只要在終端機輸入 make menuconfig 這類的指令就可以了。但如果在不同的開發流程中，就不是這麼單純了。\n本文主要是針對 Yocto 開發流進行記錄，未來有機會的話，會再補充 buildroot 的開發方式。\n主要內容 下圖取自 Yocto 官網。圖中示表了，在 Yocto 環境中開發 Kernel 時的流程\n https://docs.yoctoproject.org/current/kernel-dev/intro.html\n  接下來的內容，筆者已初始化完 Yocto 相關的環境變數。此步驟若不清楚，可參考 這裡\n\n找到 Kernel 來源 Kernel 的配置一般來說，都會放在 conf/machine/ 中，並且會配置 PREFERRED_PROVIDER_virtual/kernel 來指定使用的 kernel。所以我們可以直接以 */conf/machine/*.conf 來進行搜尋。\n1  find . -wholename \u0026#34;*/conf/machine/*.conf\u0026#34;    找尋 machine 配置檔\n  以 qemuarm.conf 為例:\n在這份檔案中我們並沒有看到 PREFERRED_PROVIDER_virtual/kernel 的設定。所以我們要去查看它引入的文件。\n qemuarm.conf\n  在 qemuarm.inc:22 ，我們看到它是配置為 linux-yocto\n qemuarm.inc\n  接下來就是要去找到 linux-yocto 它的配置檔在哪裡了。\n通常它會被放在 recipes-kernel/linux 中，但我們還是可以直接以搜尋的方式找到它。\n1  find . -iname \u0026#34;linux-yocto*\u0026#34;    最後我們可以看 SRC_URL 所指定的位置，即是 Kernel 的來源。\n 呼喚出熟悉的畫面 1  bitbake virtual/kernel -c menuconfig    製作 Configuration Fragment 執行下列指令來產生 configuration fragment。產生的檔案會放置在 ${WORKDIR}/fragment.cfg。\n而 ${WORKDIR} 的位置可參考手冊中註明的位置: ${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PN}/${EXTENDPE}${PV}-${PR}。\n1 2 3 4  bitbake virtual/kernel -c diffconfig # 把透過 diffconfig 產生的 fragment.cfg 移過來 \u0008mv tmp/work/qemuarm-poky-linux-gnueabi/linux-yocto/5.4.129+gitAUTOINC+c5e5dc4e13_dfb9647332-r0/fragment.cfg my-local-version.cfg   從內容應該可以看出來，筆者只有修改了 local version 而已。\n1  CONFIG_LOCALVERSION=\u0026#34;-yuan\u0026#34;   接下來我們可以透過 recipetool 幫我們將 my-local-version.cfg 加入我們的 Layer中。\n1  recipetool appendsrcfile meta-first-layer linux-yocto my-local-version.cfg   重新編譯 kernel\n1 2 3 4  bitbake virtual/kernel # 重新編譯 Image bitbake core-image-minimal   使用 qemu 進行驗證\n1  runqemu qemuarm core-image-minimal nographic slirp    修改 LOCALVERSION 之後的結果\n  寫在最後 筆者在驗證修改 LOCALVERSION 是否有修改成功時，返覆的使用下列指令進行確認。\n但時常會沒有修改成功。\n1 2  bitbake linux-yocto -c kernel_configme -f bitbake linux-yocto -c kernel_configcheck -f   若有發現原因，會再進行補充。\n補充說明 如果在執行 bitbake virtual/kernel -c menuconfig 遇到了下列錯誤，可以安裝 screen 或是 tmux 來解決此問題。\nTried the following commands:\ntmux split-window -c \u0026ldquo;{cwd}\u0026rdquo; \u0026ldquo;do_terminal\u0026rdquo;\ntmux new-window -c \u0026ldquo;{cwd}\u0026rdquo; -n \u0026ldquo;linux-imx Configuration\u0026rdquo; \u0026ldquo;do_terminal\u0026rdquo;\nxfce4-terminal -T \u0026ldquo;linux-imx Configuration\u0026rdquo; -e \u0026ldquo;do_terminal\u0026rdquo;\nterminology -T=\u0026ldquo;linux-imx Configuration\u0026rdquo; -e do_terminal mate-terminal \u0026ndash;disable-factory -t \u0026ldquo;linux-imx Configuration\u0026rdquo; -x do_terminal\nkonsole \u0026ndash;separate \u0026ndash;workdir . -p tabtitle=\u0026ldquo;linux-imx Configuration\u0026rdquo; -e do_terminal\ngnome-terminal -t \u0026ldquo;linux-imx Configuration\u0026rdquo; \u0026ndash; do_terminal\nxterm -T \u0026ldquo;linux-imx Configuration\u0026rdquo; -e do_terminal\nrxvt -T \u0026ldquo;linux-imx Configuration\u0026rdquo; -e do_terminal\ntmux new -c \u0026ldquo;{cwd}\u0026rdquo; -d -s devshell -n devshell \u0026ldquo;do_terminal\u0026rdquo;\nscreen -D -m -t \u0026ldquo;linux-imx Configuration\u0026rdquo; -S devshell do_terminal  安裝方式:\n1  sudo apt install -y tmux   小結 在 Yocto 環境中調整 Kernel 其實是有許多方法的，例: 使用自己指定的 Kernel Source、使用我們給定的 defconfig，或是使用 patch 等。\n而我們此次是透過給予 Configuration Fragments 的方式進行。\n未來若有使用到其他方式，會再額外撰寫記錄。\n參考連結  Yocto Project Linux - Kernel Development Manual Yocto How to config image through layer Bitbake append file to reconfigure kernel ","description":"","id":2,"section":"posts","tags":["yocto","linux","kernel"],"title":"在 Yocto 環境中調整 Linux Kernel","uri":"https://e61983.github.io/2021-07-30-yocto-kernel-menuconfig/"},{"content":"前言 突然好奇，要如何在 Hugo 中使用外部資源。本文就先以最簡單的方式，使用 CDN 引入 Bootstrap。\n主要內容 在文中貼上 Bootstrap 官網的 CDN 即可。\n1 2 3  \u0026lt;link href=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; integrity=\u0026#34;sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\u0026#34; integrity=\u0026#34;sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;   接著就可以開始使用了。\n下列以幻燈片作為範例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  \u0026lt;div id=\u0026#34;carouselExampleIndicators\u0026#34; class=\u0026#34;carousel slide\u0026#34; data-bs-ride=\u0026#34;carousel\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-indicators\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleIndicators\u0026#34; data-bs-slide-to=\u0026#34;0\u0026#34; class=\u0026#34;active\u0026#34; aria-current=\u0026#34;true\u0026#34; aria-label=\u0026#34;Slide 1\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleIndicators\u0026#34; data-bs-slide-to=\u0026#34;1\u0026#34; aria-label=\u0026#34;Slide 2\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleIndicators\u0026#34; data-bs-slide-to=\u0026#34;2\u0026#34; aria-label=\u0026#34;Slide 3\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-inner\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-item active\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://picsum.photos/1024/800?random=1\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;demo image 1\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://picsum.photos/1024/800?random=2\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;demo image 2\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://picsum.photos/1024/800?random=3\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;demo image 3\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026#34;carousel-control-prev\u0026#34; type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleIndicators\u0026#34; data-bs-slide=\u0026#34;prev\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;carousel-control-prev-icon\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;visually-hidden\u0026#34;\u0026gt;Previous\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;carousel-control-next\u0026#34; type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleIndicators\u0026#34; data-bs-slide=\u0026#34;next\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;carousel-control-next-icon\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;visually-hidden\u0026#34;\u0026gt;Next\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt;            Previous   Next      小結 使用 CDN 就是如此的樸實無華好上手呀~\n參考連結  Bootstrap 5 Offical  ","description":"","id":3,"section":"posts","tags":["bootstrap","web"],"title":"要如何在Hugo 中使用Bootstrap ?","uri":"https://e61983.github.io/2021-07-28-using-bootstrap-with-hugo/"},{"content":"前言 在準備完開發環境之後，接下來就要開始加上我們的設定、服務或是應用了。\n主要內容 在進行下列操作前，我們需要先初始化 Yocto 環境，如果還不知道要如何進行的同學，可以參考這邊。\n建立我們的 \u0026ldquo;層\u0026rdquo; 建議是將我們的 Layer 放在建置資料夾( first-build )的外面。所以我們將在它的上一層目錄建立我們的 Layer meta-first-layer。\n1 2 3 4  cd .. ls # first-build poky  bitbake-layers create-layer meta-first-layer ls # first-build meta-first-layer poky    加入我們的 \u0026ldquo;層\u0026rdquo; 在建置資料夾( first-build ) 中執行下列指令，它會幫我們更新 conf/bblayer.bb 的內容。\n1 2  cd first-build bitbake-layers add-layer ../meta-first-layer   Recipes-example 我們在建立 meta-first-layer 時，bitbake-layers 會順便幫我們建立 recipes-example。\n我們可以透過下列指令，看到它的輸出結果。\n1  bitbake example   執行結果:\n 執行結果\n  建立我們的 Recipes-Hello Yocto 專案提供了許多便捷的工具，其中 recipetool 與 devtool 便是與 Recipes 較為相關。\n接下來我們將會使用 recipetool 來建立我們的 Recipes。\n建立 recipes-hello 資料夾，並在 files 中放入我們的源始碼。\n1 2  mkdir -p recipes-hello/hello/files cd recipes-hello/hello   main.c:\n1 2 3 4 5 6  #include \u0026lt;stdio.h\u0026gt; int main(int argc, char *argv[]) { printf(\u0026#34;Hello\\n\u0026#34;); return 0; }   Makefile:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  SRCS := main.c OBJS := $(SRCS:.c=.o) bindir ?= /usr/bin TARGET := hello all: $(TARGET) %.o : %.c $(CC) -c $\u0026lt; -o $@ ${LDFLAGS} $(TARGET) : $(OBJS) $(CC) $^ -o $@ ${LDFLAGS} install: install -d $(DESTDIR)$(bindir) install -m 755 $(TARGET) $(DESTDIR)$(bindir)/   使用 recipetool 建立 recipe\n1  recipetool create -o hello_0.1.bb files   修改產生出的 hello_0.1.bb\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  LICENSE = \u0026#34;CLOSED\u0026#34; LIC_FILES_CHKSUM = \u0026#34;\u0026#34; SRC_URI = \u0026#34; \\ file://main.c \\ file://Makefile \\ \u0026#34; S = \u0026#34;${WORKDIR}\u0026#34; do_configure () { } do_compile () { oe_runmake } do_install () { oe_runmake install \u0026#39;DESTDIR=${D}\u0026#39; }   回到 first-build 進行測試\n1  bitbake hello   可以正常的進行編譯，但在最後出現了問題。\nERROR: hello-0.1-r0 do_package_qa: QA Issue: File /usr/bin/hello in package hello doesn\u0026rsquo;t have GNU_HASH (didn\u0026rsquo;t pass LDFLAGS?) [ldflags]\nERROR: hello-0.1-r0 do_package_qa: QA run found fatal errors. Please consider fixing them.\nERROR: Logfile of failure stored in: /home/yuan/first-build/tmp/work/cortexa7t2hf-neon-vfpv4-poky-linux-gnueabi/hello/0.1-r0/temp/log.do_package_qa.2726283\nERROR: Task (/home/yuan/meta-first-layer/recipes-hello/hello/hello_0.1.bb:do_package_qa) failed with exit code \u0026lsquo;1\u0026rsquo;  參考這篇文章\u0008修改 hello_0.1.bb\n1 2 3 4 5 6 7  do_install () { oe_runmake install \u0026#39;DESTDIR=${D}\u0026#39; } + + INSANE_SKIP_${PN} = \u0026#34;ldflags\u0026#34; + INSANE_SKIP_${PN}-dev = \u0026#34;ldflags\u0026#34;    建立我們的 image 在 recipes-hello 中建立 images 資料夾。\n1 2 3  mkdir -p recipes-hello/images cd recipes-hello/images cp ../../../poky/meta/recipes-core/images/core-image-minimal.bb hello-image.bb   hello-image.bb:\n1 2 3 4 5 6 7 8 9 10  SUMMARY = \u0026#34;A hello image that just for testing our layer\u0026#34; LICENSE = \u0026#34;MIT\u0026#34; IMAGE_INSTALL = \u0026#34;packagegroup-core-boot ${CORE_IMAGE_EXTRA_INSTALL}hello\u0026#34; inherit core-image IMAGE_ROOTFS_SIZE ?= \u0026#34;8192\u0026#34; IMAGE_ROOTFS_EXTRA_SPACE_append = \u0026#34;${@bb.utils.contains(\u0026#34;DISTRO_FEATURES\u0026#34;, \u0026#34;systemd\u0026#34;, \u0026#34; + 4096\u0026#34;, \u0026#34;\u0026#34; ,d)}\u0026#34;   回到 first-build 進行測試\n1 2  bitbake hello-image runqemu hello-image nographic slirp    另一個建立 Recipes-hello 的方法  在工作目錄 ( first-build ) 使用 devtool 加入我們寫好的 hello 至 工作目錄中。\n1  devtool add hello ../hello   這個動作會幫我們在 conf/bblayer.bb 中加入 workspace 層，並建立 workspace/recipes/hello 資料夾。\n使用下列指令編譯 hello\n1 2  devtool build hello ls   可以發現它確實多了 Workspace Layer\n 使用 devtool 建立臨時測試用的 image，並使用 qemu 進行驗證。\n1 2  devtool build-image core-image-minimal runqemu core-image-minimal nographic slirp    在測試沒有問題之後，再使用 devtool 將 hello 加入我們的 Layer\n1  devtool finish hello ../meta-first-layer   小結 我們已經建立了自己的 Layer、Recipe 以及 Image。 接下來我們就可以試著建立屬於我們的 Distribution 和 Machine 了。\n參考連結  Building your own recipes from first principles How to fix : ERROR: do_package_qa: QA Issue: No GNU_HASH in the elf binary Devtool Reference Yocto Manual ","description":"","id":4,"section":"posts","tags":["yocto"],"title":"Yocto First Layer","uri":"https://e61983.github.io/2021-07-28-yocto-first-layer/"},{"content":"前言 先前有接觸過 buildroot 這類的 Linux Distribution 工具，但一直沒有好好的整理起來。\n最近剛好有機會接觸 Yocto，打算在摸索的過程中一並記錄起來。\n主要內容 Yocto 專案 有關於 Yocto 專案的歴史就不多做介紹了，有興趣的同學可以到它的官網看看。\n Yocto 官網畫面\n  基本觀念  Yocto 開發流程\n  Machine 相關的配置會放在 conf/machine/ 中。它用來描述與硬體有關的配置。通常包含: Kernel、Devices Tree、Bootloader。\nDistrobution 相關的配置會放在 conf/distro/ 中。它作為整個配置中最底層的部份。接下來的 Layer 都會以此為基礎往上疊加。通常它也訂定了此系統的 ABI 。\nImage 相關的配置會放在 recipes-*/images/ 中。它就是 rootfs。\nLayer 是由 Recipe 所組成，根據不同用途可以定義出BSP Layer, General Layer。\n一般來說我們會以  meta- 開頭作為 Layer 的命名。\nRecipe 是由一系列建構 Package 的指令所組成。描述了 Package 該如何取得源始碼、如何進行配置、如何進行編譯以及安裝的步驟。\nPackage 在 Yocto 中 Package 是代表 Recipe 的執行結果。\n 建立 Yocto 環境 下載 Poky。\n 等一下\u0026hellip; 怎麼突然就冒一個 poky 出來\n這個就先請同學自行去 Yocto 的官網看了\n 1 2  mkdir yocto \u0026amp;\u0026amp; cd yocto git clone git://git.yoctoproject.org/poky.git   輸入下列指令初始化環境，它會幫我們建立 first-build 資料夾。並設置好相關的環境變數。\n1  source poky/oe-init-build-env first-build   開始第一個專案 輸入下列指令，就會開始進行編譯了。\n1  \u0008bitbake core-image-miminal   依照網路環境、編譯主機的不同，執行的時間會有所不同。但第一次都要蠻久的就是了。  在編譯完成之後，使用 qemu 來看看成果。\n1  runqemu qemuarm core-image-miminal nographic slirp   使用 root 登入\n 登入畫面\n  小結 本文記錄了 Yocto 開發時會需要知道的基楚資訊，未來在開發時，有發現不足的部份會再持續的補充。\n參考連結  Yocto Official Bootlin - Introduction to Yocto project ","description":"","id":5,"section":"posts","tags":["yocto","linux"],"title":"Yocto 基礎介紹","uri":"https://e61983.github.io/2021-07-27-yocto-introduction/"},{"content":"前言 手邊有一片很久沒有動過的 Raspberry Pi 3 B+。剛好最近工作上需要在 imx8 進行開發。藉此順便先練練手。\n主要內容 準備 Yocto 環境  建立我們要開發的資料夾 my-rpi，接下來我們都會在這個資料夾中進行操作。 下載 poky 。  1 2  mkdir my-rpi \u0026amp;\u0026amp; cd my-rpi git clone -b hardknott git://git.yoctoproject.org/poky.git   準備 meta-raspberrypi 層\n1  git clone -b hardknott git://git.yoctoproject.org/meta-raspberrypi   初始化開發環境\n1  source poky/oe-init-build-env build-rpi   加入 meta-raspibary 層\n1  bitbake-layers add-layer ../meta-raspberrypi   修改配置 1 2 3 4 5 6  sed -i \u0026#39;s/^MACHINE.*/MACHINE ?= \u0026#34;raspberrypi3\u0026#34;/g\u0026#39; conf/local.conf sed -i \u0026#39;/^#DL_DIR ?= \u0026#34;${TOPDIR}\\/downloads\u0026#34;/ a DL_DIR ?= \\\u0026#34;${HOME}/yocto/downloads\u0026#34;\u0026#39; conf/local.conf sed -i \u0026#39;s/^PACKAGE_CLASSES.*/PACKAGE_CLASSES ?= \u0026#34;package_ipk\u0026#34;/g\u0026#39; conf/local.conf echo \u0026#39;RPI_USE_U_BOOT = \u0026#34;1\u0026#34;\u0026#39; \u0026gt;\u0026gt; conf/local.conf echo \u0026#39;ENABLE_UART = \u0026#34;1\u0026#34;\u0026#39; \u0026gt;\u0026gt; conf/local.conf   開始編譯 1  bitbake core-image-minimal   寫入 SD Card 1 2  bzip -Dk core-image-minimal-raspberrypi3.wic.bz2 sudo dd if=core-image-minimal-raspberrypi3.wic of=${SD_CARD} bs=40960   小結 編譯出來的系統已可以開始，並在UART 終端機看到開始時的輸出，以及可以使用root 進入系統。\n參考連結  Yocto official meta-raspberrypi Building Raspberry Pi Systems with Yocto ","description":"","id":6,"section":"posts","tags":["linux","yocto"],"title":"使用 Yocto 打造你的 Raspberry Pi 系統","uri":"https://e61983.github.io/2021-07-26-building-raspberry-pi-systems-with-yocto/"},{"content":"前言 以前有使用過 hexo 建立Blog，但一直沒有好好的經營。最近又有想要開始寫 Blog 的念頭。\n希望這一次，可以持續撰寫下去。\n主要內容 由於筆者是使用 MacBook 作為日常使用的工具，所以本文將以 Mac 環境進行筆記。\n安裝 Hugo 1  brew install hugo   建立網站 1  hugo new ${SITE_NAME}   撰寫文章 1 2  cd ${SITE_NAME} hugo new posts/my-first-post.md   設定佈景主題 1 2  git submodule add https://github.com/upagge/uBlogger.git themes/uBlogger echo \u0026#39;theme = \u0026#34;uBlogger\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml   修改樣式 建立相關資料夾\n1  mkdir -p assets/css/   加入自訂樣式\n1 2 3 4  code[class*=\u0026#34;language-\u0026#34;] { color: white; text-shadow: none; }   小結 這次只有進行簡易的設定，還有許多功能還未探索。目前打算先用一陣子，再看看還有什麼有趣的東西。\n參考連結  uBlogger offical website 第 12 屆 iT 邦幫忙鐵人賽 - Hugo 貼身打造個人部落格 系列 ","description":"","id":7,"section":"posts","tags":["go","web","markdown"],"title":"打造自己的Blog","uri":"https://e61983.github.io/2021-07-26-first-hugo-website/"},{"content":"前言 使 GNU LD 輸出總共使用的記憶體大小與程式大小。\n主要內容 Makefile:\nLDFLAGS += -Wl,--print-memory-usage 參考連結  GNU LD - command options ","description":"","id":8,"section":"posts","tags":["linker"],"title":"GNU LD print memory usage","uri":"https://e61983.github.io/2018-02-06-ld-print-memory-usage/"},{"content":"前言 Generic 在C11上出現，我們可以透過實作出物件導向中的多型。要注意的是 Generic 是在編譯時期運作的。\n主要內容 1 2 3 4 5 6 7 8 9 10 11 12 13 14  #include \u0026lt;stdio.h\u0026gt;void funci(int x) { printf(\u0026#34;func value = %d\\n\u0026#34;, x); } void funcc(char c) { printf(\u0026#34;func char = %c\\n\u0026#34;, c); } void funcdef(double v) { printf(\u0026#34;Def func\u0026#39;s value = %lf\\n\u0026#34;, v); } #define func(X) \\ _Generic((X), \\ int: funci, char: funcc, default: funcdef \\ )(X) int main() { func(1); func(\u0026#39;a\u0026#39;); func(1.3); return 0; }   在多個參數的使用上比較繁瑣，需要自行作每個參數的組合。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  #define format2(x,y) _Generic((x), \\ char: _Generic((y), \\ char:\u0026#34;%c - %c\\n\u0026#34;, \\ char*:\u0026#34;%c - %s\\n\u0026#34;, \\ int:\u0026#34;%c - %d\\n\u0026#34;, \\ default:\u0026#34;error\\n\u0026#34; \\ ), \\ char*: _Generic((y), \\ char:\u0026#34;%s - %c\\n\u0026#34;, \\ char*:\u0026#34;%s - %s\\n\u0026#34;, \\ int:\u0026#34;%s - %d\\n\u0026#34;, \\ default:\u0026#34;error\\n\u0026#34; \\ ), \\ int: _Generic((y), \\ char:\u0026#34;%d - %c\\n\u0026#34;, \\ char*:\u0026#34;%d - %s\\n\u0026#34;, \\ int:\u0026#34;%d - %d\\n\u0026#34;, \\ default:\u0026#34;error\\n\u0026#34; \\ ), \\ default:\u0026#34;error\\n\u0026#34; \\ )  #define print2(x, y) printf(format2(x,y),x,y) int main(int argc, char **argv) { printf(\u0026#34;test 2 parameters\\n\u0026#34;); print2(3, \u0026#39;c\u0026#39;); return 0; }   ","description":"","id":9,"section":"posts","tags":["c11"],"title":"C11 Generic Selections","uri":"https://e61983.github.io/2017-10-18-c11-generic-selections/"}]