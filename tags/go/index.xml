<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Yuan のノート</title><link>https://e61983.github.io/tags/go/</link><description>Recent content in Go on Yuan のノート</description><generator>Hugo</generator><language>zh-tw</language><lastBuildDate>Wed, 03 Sep 2025 22:48:04 +0800</lastBuildDate><atom:link href="https://e61983.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>從 glibc 到 musl : 靜態編譯上的新選擇</title><link>https://e61983.github.io/posts/go-cgo-static-dynamic-link/</link><pubDate>Wed, 03 Sep 2025 22:48:04 +0800</pubDate><guid>https://e61983.github.io/posts/go-cgo-static-dynamic-link/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;在 Go 世界裡，&lt;strong&gt;可移植性&lt;/strong&gt; 一直是它引以為傲的特性。大部分時候，我們只要 &lt;code&gt;go build&lt;/code&gt; 就能得到一個幾乎純靜態的二進位，拿去其他機器執行也不太會出問題。然而，這種「幾乎」背後，跟 &lt;code&gt;cgo&lt;/code&gt; 和 &lt;code&gt;cmd/link&lt;/code&gt; 的運作有很大關係。本文將以 &lt;strong&gt;cgo 為核心&lt;/strong&gt;，延伸到 &lt;strong&gt;linkmode&lt;/strong&gt; 與 &lt;strong&gt;musl-gcc&lt;/strong&gt; 的應用，帶同學們理解 Go 執行檔在靜態與動態鏈結上的差異。&lt;/p&gt;</description></item><item><title>認識 Cgo：Go 與 C 語言的橋樑</title><link>https://e61983.github.io/posts/cgo-introduction/</link><pubDate>Tue, 02 Sep 2025 22:22:33 +0800</pubDate><guid>https://e61983.github.io/posts/cgo-introduction/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;在撰寫 Go 程式的過程中，有時候我們會遇到這樣的情境：某些功能已經有穩定的 C 函式庫可以使用，若能直接呼叫這些現有資源，就能避免重複造輪子。&lt;br&gt;
Go 語言本身提供了 &lt;code&gt;cgo&lt;/code&gt; 這個工具，讓我們能順利地在 Go 程式中嵌入並呼叫 C 程式碼。&lt;/p&gt;
&lt;p&gt;本文會帶你從基礎開始認識 &lt;code&gt;cgo&lt;/code&gt;，並透過範例說明如何在 Go 專案中使用它。&lt;/p&gt;</description></item><item><title>在 Go 裡直接抓 Docker 容器 IP，連線 PostgreSQL</title><link>https://e61983.github.io/posts/use-docker-api-query-container-ip/</link><pubDate>Sun, 31 Aug 2025 23:03:35 +0800</pubDate><guid>https://e61983.github.io/posts/use-docker-api-query-container-ip/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;開發環境裡，我們常用 &lt;strong&gt;Docker Compose&lt;/strong&gt; 來啟動資料庫。像是 PostgreSQL 這種服務，我們通常會這樣做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;1&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;2&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="s2"&gt;&amp;#34;5432:5432&amp;#34;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣就能用 &lt;code&gt;localhost:5432&lt;/code&gt; 直接連資料庫，簡單又方便。&lt;/p&gt;
&lt;p&gt;最近在思考，如果我們不想把資料庫連接埠對外暴露，想完全在 Docker network 裡面連線。&lt;br&gt;
但容器的 IP 每次重啟都不一樣，我們該怎麼辦？&lt;/p&gt;
&lt;p&gt;答案是：別手動 &lt;code&gt;docker inspect&lt;/code&gt;，直接在 Go 裡用 &lt;strong&gt;Docker API&lt;/strong&gt; 查 IP 就好。&lt;br&gt;
查完 IP，再用它去連 PostgreSQL，完全自動化，安全又乾淨。&lt;/p&gt;</description></item><item><title>OTP — 一次性密碼的原理與實作</title><link>https://e61983.github.io/posts/otp-code-introduction/</link><pubDate>Tue, 26 Aug 2025 23:54:11 +0800</pubDate><guid>https://e61983.github.io/posts/otp-code-introduction/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;有時候我們登入服務時，螢幕會跳出一句：「你的驗證碼是 123456」。這串數字只能用一次，過了幾十秒就失效了。這種機制叫做 &lt;strong&gt;OTP（One-Time Password，一次性密碼）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;它看似簡單，卻是今天大多數二階段驗證（2FA）或多因子驗證（MFA）的基石。這篇文章，就來聊聊 OTP 的運作方式，最後會給一個 Go 的範例程式，讓你自己動手試試。&lt;/p&gt;</description></item><item><title>用 Go 打造 Passkey（WebAuthn）最小可行產品：從原理到 MVP 實作</title><link>https://e61983.github.io/posts/passkey-introduction/</link><pubDate>Mon, 25 Aug 2025 23:45:30 +0800</pubDate><guid>https://e61983.github.io/posts/passkey-introduction/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;「把密碼換成裝置裡的私鑰」——這就是 Passkey 的核心概念。
我們用最小可行的方式，寫一個可以真的註冊與登入的 WebAuthn 小服務。&lt;/p&gt;</description></item><item><title>使用 Go 串接 Google reCAPTCHA Enterprise</title><link>https://e61983.github.io/posts/use-google-recaptcha/</link><pubDate>Wed, 20 Aug 2025 23:22:42 +0800</pubDate><guid>https://e61983.github.io/posts/use-google-recaptcha/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;在網站應用中，表單或登入功能常常成為機器人攻擊的目標。
Google reCAPTCHA Enterprise 提供了更安全且彈性的防護方式，能透過 &lt;strong&gt;風險評分 (Score)&lt;/strong&gt; 來判斷使用者行為是否可信。&lt;/p&gt;</description></item><item><title>使用 Gomobile 建立 iOS 函式庫</title><link>https://e61983.github.io/posts/use-gomobile-to-build-ios-library/</link><pubDate>Tue, 19 Aug 2025 19:00:00 +0800</pubDate><guid>https://e61983.github.io/posts/use-gomobile-to-build-ios-library/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;心之所至，隨意亂寫。&lt;/p&gt;
&lt;p&gt;這篇就是想隨手記下：如果有個簡單的 greeting 功能想拿到 iOS 用，用 Gomobile 該怎麼做。於是乎這篇就誕生啦。&lt;/p&gt;</description></item><item><title>在 Go 語言中使用 Websocket</title><link>https://e61983.github.io/posts/golang-and-websocket/</link><pubDate>Sun, 14 Aug 2022 15:41:25 +0800</pubDate><guid>https://e61983.github.io/posts/golang-and-websocket/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;先前在網頁中想取得即時資料。在那個時候有聽到 websocket 這個東西，但一直沒有時間試試。最近剛好又想起了這件事，於是乎這一篇就誕生啦。&lt;/p&gt;</description></item><item><title>在 Go 中與 Protobuf 共舞 ？！</title><link>https://e61983.github.io/posts/go-and-protobuf/</link><pubDate>Tue, 09 Aug 2022 23:20:07 +0800</pubDate><guid>https://e61983.github.io/posts/go-and-protobuf/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;會有這一篇的誕生是因為原本在寫 gRPC 的筆記時發現篇幅太長，想說還是拆開寫好了。於是乎這一篇就出現了。&lt;/p&gt;</description></item><item><title>Go 語言使用私有 Git Repository</title><link>https://e61983.github.io/posts/go-module-using-private-repository/</link><pubDate>Sat, 30 Jul 2022 14:51:00 +0800</pubDate><guid>https://e61983.github.io/posts/go-module-using-private-repository/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;最近終於有時間整裡筆者家中的 NAS 。先前筆者已經架設好了 Gitea，但一直沒有時間把整個開發環境串起來。這篇文章記錄了如何在 go 中使用自架的 Git Repository。&lt;/p&gt;</description></item><item><title>Go語言、動態連結函式庫與它們的產地</title><link>https://e61983.github.io/posts/golang-with-shared-library/</link><pubDate>Thu, 21 Jul 2022 13:16:54 +0800</pubDate><guid>https://e61983.github.io/posts/golang-with-shared-library/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;最近寫 Go 時想嘗試使用動態連結函式庫。於是乎這一篇就誔生了。
本文會試著使用 Go 編出一個動態連結函式庫，並使用 C 語言程式以及 Go 語言程式呼叫它。&lt;/p&gt;</description></item><item><title>使用 Vue、Electron 以及 Go 建立一個小工具</title><link>https://e61983.github.io/posts/how-to-use-vue-electron-and-go-to-build-an-app/</link><pubDate>Fri, 15 Jul 2022 16:01:27 +0800</pubDate><guid>https://e61983.github.io/posts/how-to-use-vue-electron-and-go-to-build-an-app/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;最近剛好有機會要寫有圖形化介面的程式。想來想去感覺可以寫寫看 Electron！於是乎本篇就這樣誕生了。&lt;/p&gt;</description></item><item><title>使用 Gin 框架實作登入功能</title><link>https://e61983.github.io/posts/go-gin-web-backend/</link><pubDate>Tue, 14 Sep 2021 17:03:13 +0800</pubDate><guid>https://e61983.github.io/posts/go-gin-web-backend/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;最近又要開始接觸到網頁的東西了!
久沒有碰要再花一點時間回想。想說就趁著這次順手記錄起來吧。&lt;/p&gt;</description></item><item><title>在台灣常見的地理位置表示方式</title><link>https://e61983.github.io/posts/gps-format/</link><pubDate>Thu, 19 Aug 2021 14:22:28 +0800</pubDate><guid>https://e61983.github.io/posts/gps-format/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;最近開始接觸到跟 GPS 有關的東西，想說順便把地理定位相關的資料整理起來。所以這一篇就這樣誕生啦。&lt;/p&gt;</description></item><item><title>COSCUP 2021 Day 1</title><link>https://e61983.github.io/posts/coscup-2021-day-1/</link><pubDate>Sat, 31 Jul 2021 10:10:29 +0800</pubDate><guid>https://e61983.github.io/posts/coscup-2021-day-1/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;今年的 COSCUP 因應 COVID-19 疫情，所以以線上直播的方式進行。本篇主要是記錄大會第一天有興趣的議程以及關鍵字。&lt;/p&gt;</description></item><item><title>打造自己的Blog</title><link>https://e61983.github.io/posts/first-hugo-website/</link><pubDate>Mon, 26 Jul 2021 15:35:30 +0800</pubDate><guid>https://e61983.github.io/posts/first-hugo-website/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;以前有使用過 hexo 建立Blog，但一直沒有好好的經營。最近又有想要開始寫 Blog 的念頭。
希望這一次，可以持續撰寫下去。&lt;/p&gt;</description></item></channel></rss>